formats:
  - oas2
  - oas3
aliases:
  ArrayProperties:
    targets:
      - formats:
          - oas2
          - oas3_0
        given:
          - $..[?(@ && @.type=="array")]
      - formats:
          - oas3_1
        given:
          - $..[?(@ && @.type=="array")]
          - $..[?(@ && @.type && @.type.constructor.name === "Array" && @.type.includes("array"))]
  IntegerProperties:
    targets:
      - formats:
          - oas2
          - oas3_0
        given:
          - $..[?(@ && @.type=="integer")]
      - formats:
          - oas3_1
        given:
          - $..[?(@ && @.type=="integer")]
          - $..[?(@ && @.type && @.type.constructor.name === "Array" && @.type.includes("integer"))]
  StringProperties:
    targets:
      - formats:
          - oas2
          - oas3_0
        given:
          - $..[?(@ && @.type=="string")]
      - formats:
          - oas3_1
        given:
          - $..[?(@ && @.type=="string")]
          - $..[?(@ && @.type && @.type.constructor.name === "Array" && @.type.includes("string"))]
rules:
  owasp:api1:2019-no-numeric-ids:
    description: OWASP API1:2019 - Use random IDs that cannot be guessed. UUIDs are preferred.
    severity: error
    given: $.paths..parameters[*][?(@property === "name" && (@ === "id" || @.match(/(_id|Id|-id)$/)))]^.schema
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          not:
            properties:
              type:
                const: integer
          properties:
            format:
              const: uuid
  owasp:api2:2019-no-http-basic:
    message: Security scheme uses HTTP Basic. Use a more secure authentication method, like OAuth 2.0.
    description: Basic authentication credentials transported over network are more susceptible to interception than other forms of authentication, and as they are not encrypted it means passwords and tokens are more easily leaked.
    severity: error
    given: $.components.securitySchemes[*]
    then:
      field: scheme
      function: pattern
      functionOptions:
        notMatch: basic
  owasp:api2:2019-no-api-keys-in-url:
    message: 'ApiKey passed in URL: {{error}}.'
    description: |-
      API Keys are (usually opaque) strings that
      are passed in headers, cookies or query parameters
      to access APIs.
      Those keys can be eavesdropped, especially when they are stored
      in cookies or passed as URL parameters.
      ```
      security:
      - ApiKey: []
      paths:
        /books: {}
        /users: {}
      securitySchemes:
        ApiKey:
          type: apiKey
          in: cookie
          name: X-Api-Key
      ```
    severity: error
    formats:
      - oas3
    given:
      - $..[securitySchemes][?(@ && @.type=="apiKey")].in
    then:
      - function: pattern
        functionOptions:
          notMatch: ^(path|query)$
  owasp:api2:2019-no-credentials-in-url:
    message: 'Security credentials detected in path parameter: {{value}}.'
    description: URL parameters MUST NOT contain credentials such as API key, password, or secret. See [RAC_GEN_004](https://docs.italia.it/italia/piano-triennale-ict/lg-modellointeroperabilita-docs/it/bozza/doc/04_Raccomandazioni%20di%20implementazione/04_raccomandazioni-tecniche-generali/01_globali.html?highlight=credenziali#rac-gen-004-non-passare-credenziali-o-dati-riservati-nellurl)
    severity: error
    formats:
      - oas3
    given:
      # crashes when traversing a "parameters" (for instance a property) which is not a list
      #- $..parameters[?(@ && @.in && @.in.match(/query|path/))].name
      - $..parameters[?(@ && @.in && (@.in == "query" || @.in == "path"))].name
    then:
      - field: name
        function: pattern
        functionOptions:
          notMatch: /^.*(client_?secret|token|access_?token|refresh_?token|id_?token|password|secret|api-?key).*$/i
  owasp:api2:2019-auth-insecure-schemes:
    message: 'Authentication scheme is considered outdated or insecure: {{value}}.'
    description: There are many [HTTP authorization schemes](https://www.iana.org/assignments/http-authschemes/) but some of them are now considered insecure, such as negotiating authentication using specifications like NTLM or OAuth v1.
    severity: error
    formats:
      - oas3
    given:
      - $..[securitySchemes][?(@.type=="http")].scheme
    then:
      - function: pattern
        functionOptions:
          notMatch: ^(negotiate|oauth)$
  owasp:api2:2019-jwt-best-practices:
    message: Security schemes using JWTs must explicitly declare support for RFC8725 in the description.
    description: |-
      JSON Web Tokens RFC7519 is a compact, URL-safe, means of representing claims to be transferred between two parties. JWT can be enclosed in encrypted or signed tokens like JWS and JWE.

      The [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml) provides algorithms information.

      RFC8725 describes common pitfalls in the JWx specifications and in
      their implementations, such as:
      - the ability to ignore algorithms, eg. `{"alg": "none"}`;
      - using insecure algorithms like `RSASSA-PKCS1-v1_5` eg. `{"alg": "RS256"}`.
      An API using JWT should explicit in the `description`
      that the implementation conforms to RFC8725.
      ```
      components:
        securitySchemes:
          JWTBearer:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: |-
              A bearer token in the format of a JWS and conformato
              to the specifications included in RFC8725.
      ```
    severity: error
    given:
      #- $..[securitySchemes][?(@.type=="oauth2")]
      #- $..[securitySchemes][?(@.bearerFormat=="jwt" || @.bearerFormat=="JWT")]
      # Strange behavior: the original TS definition is the same but when run in a YAML file it crashes
      - $..[securitySchemes][?(@ && @.type=="oauth2")]
      - $..[securitySchemes][?(@ && (@.bearerFormat=="jwt" || @.bearerFormat=="JWT"))]
    then:
      - field: description
        function: truthy
      - field: description
        function: pattern
        functionOptions:
          match: .*RFC8725.*
  owasp:api2:2019-protection-global-unsafe:
    message: This operation is not protected by any security scheme.
    description: |-
      Your API should be protected by a `security` rule either at global or operation level. All operations should be protected especially when they
      not safe (methods that do not alter the state of the server) 
      HTTP methods like `POST`, `PUT`, `PATCH` and `DELETE`.
      This is done with one or more non-empty `security` rules.

      Security rules are defined in the `securityScheme` section.
    severity: error
    given: $
    then:
      - function: checkSecurity
        functionOptions:
          schemesPath:
            - securitySchemes
          nullable: true
          methods:
            - post
            - put
            - patch
            - delete
  owasp:api2:2019-protection-global-unsafe-strict:
    message: This operation is not protected by any security scheme.
    description: |-
      Check if the operation is protected at operation level.
      Otherwise, check the global `#/security` property.
    severity: info
    given: $
    then:
      - function: checkSecurity
        functionOptions:
          schemesPath:
            - securitySchemes
          nullable: false
          methods:
            - post
            - patch
            - delete
            - put
  owasp:api2:2019-protection-global-safe:
    message: This operation is not protected by any security scheme.
    description: |-
      Check if the operation is protected at operation level.
      Otherwise, check the global `#/security` property.
    severity: info
    given: $
    then:
      - function: checkSecurity
        functionOptions:
          schemesPath:
            - securitySchemes
          nullable: true
          methods:
            - get
            - head
  owasp:api3:2019-define-error-validation:
    message: Missing error validation response of either 400 or 422.
    description: Carefully define schemas for all the API responses, including either 400 or 422 responses which describe errors caused by invalid requests.
    severity: warn
    given: $.paths..responses
    then:
      - function: schema
        functionOptions:
          schema:
            type: object
            oneOf:
              - required:
                  - '400'
              - required:
                  - '422'
  owasp:api3:2019-define-error-responses-401:
    message: Operation is missing {{property}}.
    description: OWASP API Security recommends defining schemas for all responses, even errors. The 401 describes what happens when a request is unauthorized, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces.
    severity: warn
    given: $.paths..responses
    then:
      - field: '401'
        function: truthy
      - field: 401.content
        function: truthy
  owasp:api3:2019-define-error-responses-500:
    message: Operation is missing {{property}}.
    description: OWASP API Security recommends defining schemas for all responses, even errors. The 500 describes what happens when a request fails with an internal server error, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces.
    severity: warn
    given: $.paths..responses
    then:
      - field: '500'
        function: truthy
      - field: 500.content
        function: truthy
  owasp:api4:2019-rate-limit:
    message: All 2XX and 4XX responses should define rate limiting headers.
    description: |-
      Define proper rate limiting to avoid attackers overloading the API. There are many ways to implement rate-limiting, but most of them involve using HTTP headers, and there are two popular ways to do that:

      IETF Draft HTTP RateLimit Headers:. https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/

      Customer headers like X-Rate-Limit-Limit (Twitter: https://developer.twitter.com/en/docs/twitter-api/rate-limits) or X-RateLimit-Limit (GitHub: https://docs.github.com/en/rest/overview/resources-in-the-rest-api)
    severity: error
    formats:
      - oas3
    given: $.paths[*]..responses[?(@property.match(/^(2|4)/))]
    then:
      field: headers
      function: schema
      functionOptions:
        schema:
          type: object
          oneOf:
            - required:
                - RateLimit-Limit
                - RateLimit-Reset
            - required:
                - X-RateLimit-Limit
            - required:
                - X-Rate-Limit-Limit
  owasp:api4:2019-rate-limit-retry-after:
    message: A 429 response should define a Retry-After header.
    description: Define proper rate limiting to avoid attackers overloading the API. Part of that involves setting a Retry-After header so well meaning consumers are not polling and potentially exacerbating problems.
    severity: error
    formats:
      - oas3
    given: $..responses[429].headers
    then:
      field: Retry-After
      function: defined
  owasp:api4:2019-rate-limit-responses-429:
    message: Operation is missing rate limiting response in {{property}}.
    description: OWASP API Security recommends defining schemas for all responses, even errors. A HTTP 429 response signals the API client is making too many requests, and will supply information about when to retry so that the client can back off calmly without everything breaking. Defining this response is important not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces. It also ensures your API/framework/gateway actually has rate limiting set up.
    severity: warn
    given: $.paths..responses
    then:
      - field: '429'
        function: truthy
      - field: 429.content
        function: truthy
  owasp:api4:2019-array-limit:
    message: Schema of type array must specify maxItems.
    description: Array size should be limited to mitigate resource exhaustion attacks. This can be done using `maxItems`. You should ensure that the subschema in `items` is constrained too.
    severity: error
    given: '#ArrayProperties'
    then:
      field: maxItems
      function: defined
  owasp:api4:2019-string-limit:
    message: Schema of type string must specify maxLength.
    description: String size should be limited to mitigate resource exhaustion attacks. This can be done using `maxLength`.
    severity: error
    given: '#StringProperties'
    then:
      field: maxLength
      function: defined
  owasp:api4:2019-string-restricted:
    message: Schema of type string must specify a format or pattern.
    description: To avoid unexpected values being sent or leaked, ensure that strings have either a format or a RegEx pattern. This can be done using `format` or `pattern`.
    severity: error
    given: '#StringProperties'
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          oneOf:
            - required:
                - format
            - required:
                - pattern
  owasp:api4:2019-integer-limit:
    message: Schema of type integer must specify minimum and maximum.
    description: 'Integers should be limited to mitigate resource exhaustion attacks. This can be done using `minimum` and `maximum`, which can with e.g.: avoiding negative numbers when positive are expected, or reducing unreasonable iterations like doing something 1000 times when 10 is expected.'
    severity: error
    formats:
      - oas3_1
    given: '#IntegerProperties'
    then:
      - function: xor
        functionOptions:
          properties:
            - minimum
            - exclusiveMinimum
      - function: xor
        functionOptions:
          properties:
            - maximum
            - exclusiveMaximum
  owasp:api4:2019-integer-limit-legacy:
    message: Schema of type integer must specify minimum and maximum.
    description: 'Integers should be limited to mitigate resource exhaustion attacks. This can be done using `minimum` and `maximum`, which can with e.g.: avoiding negative numbers when positive are expected, or reducing unreasonable iterations like doing something 1000 times when 10 is expected.'
    severity: error
    formats:
      - oas2
      - oas3_0
    given: '#IntegerProperties'
    then:
      - field: minimum
        function: defined
      - field: maximum
        function: defined
  owasp:api4:2019-integer-format:
    message: Schema of type integer must specify format (int32 or int64).
    description: Integers should be limited to mitigate resource exhaustion attacks. Specifying whether int32 or int64 is expected via `format`.
    severity: error
    given: '#IntegerProperties'
    then:
      - field: format
        function: defined
  owasp:api6:2019-no-additionalProperties:
    message: If the additionalProperties keyword is used it must be set to false.
    description: 'By default JSON Schema allows additional properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with `additionalProperties: false` or add `maxProperties`.'
    severity: warn
    formats:
      - oas3
    given: $..[?(@ && @.type=="object" && @.additionalProperties)]
    then:
      - field: additionalProperties
        function: falsy
  owasp:api6:2019-constrained-additionalProperties:
    message: Objects should not allow unconstrained additionalProperties.
    description: 'By default JSON Schema allows additional properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with `additionalProperties: false` or add `maxProperties`'
    severity: warn
    formats:
      - oas3
    given: $..[?(@ && @.type=="object" && @.additionalProperties &&  @.additionalProperties!=true &&  @.additionalProperties!=false )]
    then:
      - field: maxProperties
        function: defined
  owasp:api7:2019-security-hosts-https-oas2:
    message: All servers defined MUST use https, and no other protocol is permitted.
    description: |-
      All server interactions MUST use the https protocol, so the only OpenAPI scheme being used should be `https`.

      Learn more about the importance of TLS (over SSL) here: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
    severity: error
    formats:
      - oas2
    given: $.schemes
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          items:
            type: string
            const: https
  owasp:api7:2019-security-hosts-https-oas3:
    message: Server URLs MUST begin https://, and no other protocol is permitted.
    description: |-
      All server interactions MUST use the https protocol, meaning server URLs should begin `https://`.

      Learn more about the importance of TLS (over SSL) here: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
    severity: error
    formats:
      - oas3
    given: $.servers..url
    then:
      function: pattern
      functionOptions:
        match: /^https:/
functions:
  - checkSecurity
